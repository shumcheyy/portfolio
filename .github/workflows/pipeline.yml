name: CI/CD Pipeline

on:
   push:
      branches: [main]
   pull_request:
      branches: [main]
   workflow_dispatch:

permissions:
   contents: read
   security-events: write
   actions: read

env:
   NODE_VERSION: "20"

jobs:
   quality-checks:
      name: Code Quality & Security
      runs-on: ubuntu-latest

      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Setup Node.js
           uses: actions/setup-node@v4
           with:
              node-version: ${{ env.NODE_VERSION }}
              cache: "npm"

         - name: Install dependencies
           run: npm install

         - name: Initialize CodeQL
           uses: github/codeql-action/init@v3
           with:
              languages: javascript, go

         - name: Autobuild
           uses: github/codeql-action/autobuild@v3

         - name: Run npm audit
           run: npm audit --audit-level=moderate --json > npm-audit.json || true

         - name: Run CodeQL Analysis
           uses: github/codeql-action/analyze@v3

         - name: Upload security reports
           uses: actions/upload-artifact@v4
           if: always()
           with:
              name: security-reports
              path: npm-audit.json
              retention-days: 30

   build-and-test:
      name: Build & Test
      runs-on: ubuntu-latest
      needs: quality-checks

      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Setup Node.js
           uses: actions/setup-node@v4
           with:
              node-version: ${{ env.NODE_VERSION }}
              cache: "npm"

         - name: Install dependencies
           run: npm install

         - name: Build React frontend
           run: npm run build

         - name: Upload build artifacts
           uses: actions/upload-artifact@v4
           with:
              name: build-artifacts
              path: dist/
              retention-days: 7

   container-security:
      name: Container Security
      runs-on: ubuntu-latest
      needs: build-and-test

      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Download build artifacts
           uses: actions/download-artifact@v4
           with:
              name: build-artifacts

         - name: Lint Dockerfile
           uses: hadolint/hadolint-action@v3.1.0
           with:
              dockerfile: Dockerfile

         - name: Build Docker image
           run: |
              docker build -t portfolio:${{ github.sha }} .
              docker tag portfolio:${{ github.sha }} portfolio:latest

         - name: Run Trivy vulnerability scanner
           uses: aquasecurity/trivy-action@master
           with:
              image-ref: "portfolio:latest"
              format: "sarif"
              output: "trivy-results.sarif"

         - name: Upload Trivy scan results
           uses: github/codeql-action/upload-sarif@v3
           if: always()
           with:
              sarif_file: "trivy-results.sarif"

   deploy:
      name: Deploy
      runs-on: ubuntu-latest
      needs: container-security
      if: github.ref == 'refs/heads/main'

      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Download build artifacts
           uses: actions/download-artifact@v4
           with:
              name: build-artifacts

         - name: Build final Docker image
           run: |
              docker build -t portfolio:${{ github.sha }} .

         - name: Deploy notification
           run: |
              echo "ðŸš€ Deployment successful!"
              echo "Image: portfolio:${{ github.sha }}"
              echo "Commit: ${{ github.sha }}"
