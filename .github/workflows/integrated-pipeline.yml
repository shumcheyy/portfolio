# ALTERNATIVE: Single integrated workflow (recommended)
# This replaces both pipeline.yml and deploy.yml with one efficient workflow

name: Complete CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - "README.md"
      - ".gitignore"
  pull_request:
    branches: [main]
    paths-ignore:
      - "README.md"
      - ".gitignore"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: "20"
  GO_VERSION: "1.25"
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/portfolio

jobs:
  # Security, Build, and Test
  job1-security-build:
    name: Security & Build
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 1-Checkout code
        uses: actions/checkout@v4

      - name: 2-Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 3-Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 4-Install dependencies & run security audit
        run: |
          npm install
          npm audit --audit-level=moderate --json > npm-audit.json || true

      - name: 5-Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, go
          queries: security-extended

      - name: 6-Build and test
        run: |
          npm run build
          cd go-server && go build -v ./...

      - name: 7-Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 8-Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

      - name: 9-Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 10-Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 11-Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 12-Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "1"

      - name: 13-Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Deploy to production (only on main branch)
  job2-deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: job1-security-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Deploy to Render
        run: |
          echo "Deploying security-scanned image to production..."
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}")

          if [ $response -eq 200 ] || [ $response -eq 201 ]; then
            echo "Production deployment successful!"
            echo "Image: ${{ env.IMAGE_NAME }}:${{ github.sha }}"
            echo "Security: All scans passed"
          else
            echo "Deployment failed with HTTP $response"
            exit 1
          fi

  # Notify Discord on success or failure
      - name: Notify Discord (Success)
        if: ${{ success() }}
        run: |
          curl -H "Content-Type: application/json" \
            -d "{\"content\":\":white_check_mark: Deployment succeeded for commit ${{ github.sha }}\"}" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}"

      - name: Notify Discord (Failure)
        if: ${{ failure() }}
        run: |
          curl -H "Content-Type: application/json" \
          -d "{\"content\":\":x: Deployment failed for commit ${{ github.sha }}\"}" \
          "${{ secrets.DISCORD_WEBHOOK_URL }}"
